rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function belongsToOrganization(orgId) {
      return isAuthenticated() && 
        firestore.exists(/databases/(default)/documents/organizations/$(orgId)/members/$(request.auth.uid));
    }
    
    function hasAnyRole(orgId, roles) {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/organizations/$(orgId)/members/$(request.auth.uid)).data.role in roles;
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') && 
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType.matches('application/pdf') && 
             request.resource.size < 25 * 1024 * 1024; // 25MB limit
    }
    
    function isValidExportFile() {
      return request.resource.contentType in ['application/pdf', 'text/csv', 'application/vnd.ms-excel'] && 
             request.resource.size < 50 * 1024 * 1024; // 50MB limit
    }
    
    // User profile pictures
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && isValidImageFile();
      allow delete: if isOwner(userId);
    }
    
    // Organization logos and branding
    match /organizations/{orgId}/branding/{fileName} {
      allow read: if belongsToOrganization(orgId);
      allow write: if hasAnyRole(orgId, ['owner', 'admin']) && isValidImageFile();
      allow delete: if hasAnyRole(orgId, ['owner', 'admin']);
    }
    
    // Product images
    match /organizations/{orgId}/products/{productId}/{fileName} {
      allow read: if belongsToOrganization(orgId);
      allow write: if hasAnyRole(orgId, ['owner', 'admin', 'manager', 'staff']) && isValidImageFile();
      allow delete: if hasAnyRole(orgId, ['owner', 'admin', 'manager']);
    }
    
    // Category images
    match /organizations/{orgId}/categories/{categoryId}/{fileName} {
      allow read: if belongsToOrganization(orgId);
      allow write: if hasAnyRole(orgId, ['owner', 'admin', 'manager']) && isValidImageFile();
      allow delete: if hasAnyRole(orgId, ['owner', 'admin', 'manager']);
    }
    
    // Documents (invoices, purchase orders, etc.)
    match /organizations/{orgId}/documents/{documentType}/{fileName} {
      allow read: if belongsToOrganization(orgId);
      allow write: if hasAnyRole(orgId, ['owner', 'admin', 'manager']) && isValidDocumentFile();
      allow delete: if hasAnyRole(orgId, ['owner', 'admin']);
    }
    
    // Reports and exports
    match /organizations/{orgId}/exports/{userId}/{fileName} {
      allow read: if belongsToOrganization(orgId) && isOwner(userId);
      allow write: if belongsToOrganization(orgId) && isOwner(userId) && isValidExportFile();
      allow delete: if belongsToOrganization(orgId) && isOwner(userId);
    }
    
    // Temporary uploads (for processing)
    match /temp/{userId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && request.resource.size < 100 * 1024 * 1024; // 100MB limit
      allow delete: if isOwner(userId);
    }
    
    // Backups (only accessible by organization owners)
    match /organizations/{orgId}/backups/{fileName} {
      allow read: if hasAnyRole(orgId, ['owner']);
      allow write: if false; // Only Cloud Functions can write backups
      allow delete: if hasAnyRole(orgId, ['owner']);
    }
    
    // System files (read-only)
    match /system/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins via console
    }
    
    // Default: deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}